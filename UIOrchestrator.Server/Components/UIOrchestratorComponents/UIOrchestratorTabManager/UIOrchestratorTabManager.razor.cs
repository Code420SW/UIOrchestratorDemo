using Microsoft.AspNetCore.Components;
using Syncfusion.Blazor.Navigations;
using Code420.UIOrchestrator.Server.Components.BaseComponents.TabBase;
using Code420.UIOrchestrator.Server.Code.Models.Menus;

namespace Code420.UIOrchestrator.Server.Components.UIOrchestratorComponents.UIOrchestratorTabManager
{
    /// <summary>
    /// Responsible for managing all Orchestrator Tab Items.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Provides sole access to the underlying TabBase component. Will handle events 
    /// generated by Tab Items and make appropriate calls through the <see cref="UIOrchestrator"/> 
    /// to coordinate events.
    /// </para>
    /// <para>
    /// Exposes two base parameters. 
    /// The <see cref="OrchestratorRef"/> parameter is cascaded down and is also available to all 
    /// child Tab components to provide access to the <see cref="UIOrchestrator"/>.
    /// </para>
    /// <para>
    /// The component does not expose any event callback or CSS parameters.
    /// </para>
    /// <para>
    /// Handles the following events from the TabBase component:<br />
    /// <see cref="TabBase.Removed"/> -- Triggered when a Tab is closed.<br />
    /// <see cref="TabBase.Removing"/> -- Triggered when a Tab is about to close.<br />
    /// <see cref="TabBase.SelectedItemChanged"/> -- Triggered the the active Tab changes.
    /// </para>
    /// <para>
    /// The component does not have any dependencies injected from DI.
    /// </para>
    /// <para>
    /// Provides public methods for query and CRUD operation on Tabs.
    /// </para>
    /// </remarks>

    public partial class UIOrchestratorTabManager : ComponentBase
    {

        #region Component Parameters

        #region Base Parameters

        /// <summary>
        /// Contains the reference to the <see cref="UIOrchestrator"/> parent.
        /// <remarks>
        /// Note that this is a [CascadingParameter] so that all child
        /// components have access.
        /// </remarks>
        /// </summary>
        [CascadingParameter(Name ="OrchestratorRef")]
        [EditorRequired]
        public Pages.UIOrchestrator.UIOrchestrator OrchestratorRef { get; set; }

        #endregion

        #endregion


        #region Callback Events Invoked from Underlying Components

        private void RemovedHandler(RemoveEventArgs args)
        {
            // Right now, make the first tab the active tab.
            if (tabbase.TabItems.Count > 0) InvokeAsync(async () => await SelectTabAsync(0));
        }

        private void RemovingHandler(RemoveEventArgs args)
        {
            //  Prevent an unauthenticated user from closing the Login Tab
            var isUserLoginTab = (tabbase.TabItems[args.RemovedIndex].CssClass == initialMenuItemId);
            args.Cancel =  isUserLoginTab && OrchestratorRef.UserIsAuthenticated() is false;
        }

        private void SelectedItemChangedHandler(int index)
        {
            selectedItem = index;
        }

        #endregion


        #region Instance Variables

        private TabBase tabbase;
        private readonly List<TabItem> tabItem = new();
        private int selectedItem ;
        private string initialMenuItemId => OrchestratorRef.LoginTabItemId;
    
        #endregion


        #region Public Methods Providing Access to the Underlying Components to the Consumer

        /// <summary>
        /// Adds a Tab into the list of active Tabs.
        /// </summary>
        /// <param name="localTabItem">
        /// A <see cref="TabItem"/> object to add to the active Tabs.
        /// </param>
        /// <param name="indexTabItems">
        /// Integer value containing the index in the <see cref="TabBase.TabItems"/> list
        /// of active Tabs.
        /// </param>
        /// <remarks>
        /// The method adds a <see cref="TabItem"/> object to the list of active Tabs,
        /// <see cref="TabBase.TabItems"/> at the position specified by the indexTabItems
        /// parameter.
        /// </remarks>
        public async Task AddTabAsync(TabItem localTabItem, int indexTabItems)
        {
            await tabbase.AddTabAsync(new List<TabItem> { localTabItem }, indexTabItems);
        }

        /// <summary>
        /// Disables/enables the TabBase component.
        /// </summary>
        /// <param name="disable">
        /// Boolean value specifying if the TabBase component is disabled (true) or enabled.
        /// </param>
        /// <remarks>
        /// Provides a method for enabling or disabling the entire <see cref="TabBase"/> component.
        /// Use the <see cref="EnableTabAsync(int, bool)"/> method to enable/disable a specific active Tab.
        /// </remarks>
        public async Task DisableAsync(bool disable) => await tabbase.DisableAsync(disable);

        /// <summary>
        /// Enables or disables a specific active Tab.
        /// </summary>
        /// <param name="indexTabItems">
        /// Integer value containing the index in the <see cref="TabBase.TabItems"/> list of
        /// active Tabs.
        /// </param>
        /// <param name="isEnable">
        /// Boolean value specifying is the tab is enabled (true) or disabled.
        /// </param>
        /// <returns></returns>
        /// <remarks>
        /// Provides a method for enabling or disabling one of the active Tabs.
        /// When the isEnabled parameter is false, the specified Tab remains visible but does
        /// not respond to user interactions.
        /// Use the <see cref="DisableAsync(bool)"/> method to enable/disable the entire
        /// <see cref="TabBase"/> component.
        /// </remarks>
        public async Task EnableTabAsync(int indexTabItems, bool isEnable = true) => 
            await tabbase.EnableTabAsync(indexTabItems, isEnable);

        /// <summary>
        /// Show/hides an active Tab based on the specified index.
        /// </summary>
        /// <param name="indexTabItems">
        /// Integer value containing the index in the <see cref="TabBase.TabItems"/> list of
        /// active Tabs.
        /// </param>
        /// <param name="show">
        /// Boolean value specifying if the tab is shown (true) or hidden.
        /// </param>
        /// <returns></returns>
        /// <remarks>
        /// Provides a method for hiding/showing one of the active Tabs.
        /// When the show parameter is false, the specified Tab is hidden in the Tab Manager but
        /// remains in the DOM.
        /// </remarks>
        public async Task HideTabAsync(int indexTabItems, bool show) => 
            await tabbase.HideTabAsync(indexTabItems, show);

        /// <summary>
        /// Refresh the entire <see cref="TabBase"/> component.
        /// </summary>
        /// <remarks>
        /// Provides a method for forcing the entire <see cref="TabBase"/> component to be re-rendered.
        /// </remarks>
        public async Task RefreshAsync() => await tabbase.RefreshAsync();

        /// <summary>
        /// Removes an active Tab from the <see cref="TabBase.TabItems"/> list.
        /// </summary>
        /// <param name="indexTabItems">
        /// Integer value containing the index in the <see cref="TabBase.TabItems"/> list of active Tabs.
        /// </param>
        /// <remarks>
        /// The method removes a <see cref="TabItem"/> object from the list of active Tabs,
        /// (<see cref="TabBase.TabItems"/>).
        /// </remarks>
        public async Task RemoveTabAsync(int indexTabItems)
        {
            if (tabbase.TabItems is null || tabbase.TabItems.Count is 0) return;

            await tabbase.RemoveTabAsync(indexTabItems);
        }

        /// <summary>
        /// Activates a Tab based on the specified index.
        /// </summary>
        /// <param name="indexTabItems">
        /// Integer value containing the index in the <see cref="TabBase.TabItems"/> list of active Tabs.
        /// </param>
        /// <remarks>
        /// The method will activate the Tab in the <see cref="TabBase.TabItems"/> list specified by 
        /// the indexTabItems parameter.
        /// </remarks>
        public async Task SelectTabAsync(int indexTabItems)
        {
            if (tabbase.TabItems is null || tabbase.TabItems.Count is 0) return;

            selectedItem = indexTabItems;
            await tabbase.SelectAsync(indexTabItems);
            await InvokeAsync(StateHasChanged);
        }

        /// <summary>
        /// Gets the index of the last item in the <see cref="TabBase.TabItems"/> list.
        /// </summary>
        /// <returns>
        /// Integer value representing the highest index of the TabItems list, or -1 if there are no items.
        /// </returns>
        /// <remarks>
        /// The method finds the index of the last item in the <see cref="TabBase.TabItems"/> list.
        /// Useful when the caller want to add a new Tab to the end of the <see cref="TabBase.TabItems"/> list.
        /// </remarks>
        public int GetLastTabItemsIndex()
        {
            return (tabbase.TabItems is not null) ? tabbase.TabItems.Count - 1 : -1;
        }

        /// <summary>
        /// Get the index of the passed Orchestrator Tab in the <see cref="TabBase.TabItems"/> list.
        /// <remarks>
        /// NOTE: The <see cref="TabItem.CssClass"/> parameter will match the
        /// <see cref="OrchestratorMenuItem.ItemId"/> so the CssClass value can be used to find
        /// the appropriate Tab element.
        /// </remarks>
        /// </summary>
        /// <param name="menuItemId">
        /// String value containing the <see cref="OrchestratorMenuItem.ItemId"/> of the Tab to find.
        /// </param>
        /// <returns>
        /// Integer value containing the index in the <see cref="TabBase.TabItems"/> list for the
        /// Tab whose <see cref="TabItem.CssClass"/> matches the menuItemId parameter, or -1 if
        /// the tab associated with the menuItemId is not an active Tab.
        /// </returns>
        public int GetTabItemIndexByMenuItemId(string menuItemId)
        {
            return tabbase.TabItems?.FindIndex(x => x.CssClass == menuItemId) ?? -1;
        }

        /// <summary>
        /// Closes all active tabs not in the exceptions list.
        /// Accepts an optional list of <see cref="OrchestratorMenuItem.ItemId"/> values
        /// for Tabs that should not be closed.
        /// </summary>
        /// <param name="exceptions">
        /// List of <see cref="OrchestratorMenuItem.ItemId"/> values for the Tabs
        /// that should not be closed.
        /// </param>
        /// <returns></returns>
        public async Task CloseAllActiveTabs(List<string> exceptions = null)
        {
            if (tabbase.TabItems?.Count is 0) return;

            List<string> menuItemIdOfTabsToClose;

            //  Build the list of tabs to close
            if (exceptions is null)
            {
                menuItemIdOfTabsToClose = tabbase.TabItems?.Select(x => x.CssClass).ToList();
            }
            else
            {
                menuItemIdOfTabsToClose = tabbase.TabItems?
                    .Select(x => x.CssClass)
                    .Where(e => exceptions.Contains(e) is false).ToList();
            }

            if (menuItemIdOfTabsToClose is null) return;
            
            //  Close all the tabs not in the exceptions list
            foreach (var tabIndex in menuItemIdOfTabsToClose.Select(GetTabItemIndexByMenuItemId).Where(tabIndex => tabIndex is not -1))
            {
                await RemoveTabAsync(tabIndex);
            }
        }

        #endregion

    }
}
